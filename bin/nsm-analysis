#!/usr/bin/env python3

import os
import re
import sys
import argparse
from datetime import datetime, timedelta
import json
import tempfile
import getpass

#sys.path.append('/cluster/lib/python3.6/site-packages/')
#sys.path.append('/cluster/lib64/python3.6/site-packages/')




import kbr.args_utils as args_utils
import kbr.version_utils as version_utils
import kbr.string_utils as string_utils
import kbr.datetime_utils as datetime_utils
import kbr.file_utils as file_utils
import kbr.args_utils as args_utils



sys.path.append('.')

import cromwell.api as cromwell_api
import cromwell.facade as cromwell_facade
import cromwell.utils as cromwell_utils
import cromwell.json_utils as json_utils
import cromwell.analysis as analysis


version = version_utils.as_string('cromwell')

reference = "hg38"
env = "production"
nsm_root = '/usr/local/lib/tmp/nsm-analysis'
nsm_root = '/home/brugger/projects/nsm/nsm-analysis'

nsm_zip  = f"{nsm_root}/nsm-analysis.zip"
outdir = None


wf_files = {'exome': f'{nsm_root}/workflows/dna_pipeline.wdl',
            'star': f'{nsm_root}/workflows/star.wdl',
            'salmon': f'{nsm_root}/workflows/salmon.wdl',
            'haplotype': f'{nsm_root}/workflows/haplotype_caller.wdl',
            'jointgenotyping': f'{nsm_root}/workflows/joint_genotyping.wdl',

            'bams-to-ubams': f'{nsm_root}/utils/bam_to_ubam.wdl',
            'fqs-to-ubam': f'{nsm_root}/utils/fqs_to_ubam.wdl',
            'fastqc': f'{nsm_root}/utils/fastqc.wdl',}



def init(config:dict) -> None:
    global reference, nsm_root, nsm_zip, env, outdir

    if config.development:
        env = 'development'

    reference_dir = f"{config.reference_dir}/"

    if config.reference == 'hg38':
        reference = f'{reference_dir}reference_hg38.json'
    elif config.reference == 'hg37' or config.reference == 'hg19':
        reference = f'{reference_dir}reference_hg19.json'
    elif os.path.isfile(config.reference) or os.path.isdir( config.reference ):
        reference = config.reference

    if env != 'development' and (
        not os.path.isfile( reference ) or not os.path.isdir(reference)):
        raise RuntimeError(f'reference-file/dir {reference} does not exist')

    if config.nsm_analysis_root:
        nsm_root = config.nsm_analysis_root

    if env != 'development' and not os.path.isdir( nsm_root ):
        raise RuntimeError(f'nsm-analysis root dir {nsm_root} does not exist')

    if config.zipfile:
        nsm_zip = config.zipfile

    if env != 'development' and  not os.path.isfile( nsm_zip ):
        raise RuntimeError(f'nsm-zipfile {nsm_zip} does not exist')

    if config.outdir:
        outdir = config.ourdir
    elif config.no_export == False:
        outdir = os.getcwd()

    if env == 'development':
        print("environment:\n------------")
        print(f' reference --> {reference}')
        print(f' nsm_root  --> {nsm_root}')
        print(f' nsm_zip   --> {nsm_zip}')
        print(f' outdir    --> {outdir}')
        print("\n")

    return



def dna_subcmd(args:list) -> None:

    commands = {'e':'exome', 'es': 'exomes', 'g':'genome', 'gs':'genomes','b':'bwa', 'h': 'help'}
    args_utils.min_count(1, len(args),
                         msg="nsm-analysis dna takes one of the following commands: {}".format(args_utils.pretty_commands(commands)))

    command = args.pop(0)
    command = args_utils.valid_command(command, commands)
    if command == 'exome' or command == 'genome':
        analysis.exome_genome(analysis=command, args=args, reference=reference, wdl_wf=wf_files['exome'], wdl_zip=nsm_zip, outdir=outdir, env=env, )
    elif command == 'exomes' or command == 'genomes':
        analysis.exomes_genomes(analysis=command, args=args, reference=reference, wdl_wf=wf_files['exome'], wdl_zip=nsm_zip, outdir=outdir, env=env, )
#    elif command == 'bwa':
#        analysis.bwa(args=args, reference=reference, wdl_wf=wf_files['exome'], wdl_zip=nsm_zip, outdir=outdir, env=env, )
    else:
        print("Help:")
        print("Exomes/genomes/alignment from unaligned bams (ubams)")
        print("==========================")
        print("dna exome <sample-name> <input-files>  ")
#        print("dna genome <sample-name> <input-files> ")
        print("dna exomes <input-files>  ")
#        print("dna genomes <input-files> ")
#        print("dna bwa <input-files> ")
        sys.exit(1)
    sys.exit()


def rna_subcmd(args:list) -> None:

    commands = {'s':'star', 'sa':'salmon', 'f':'featureCounts', 'h': 'help'}
    args_utils.min_count(1, len(args),
                         msg="nsm-analysis rna takes one of the following commands: {}".format(args_utils.pretty_commands(commands)))

    command = args.pop(0)
    command = args_utils.valid_command(command, commands)
    if command == 'star':
        analysis.star(args=args, reference=reference, wdl_wf=wf_files['exome'], wdl_zip=nsm_zip, outdir=outdir, env=env, )
    elif command == 'salmon':
        analysis.salmon(args=args, reference=reference, wdl_wf=wf_files['salmon'], wdl_zip=nsm_zip, outdir=outdir, env=env, )
    else:
        print("Help:")
        print("RNAseq alignment/count from fastq files")
        print("==========================")
        print("rna star <sample-name> <fwd-reads> [rev-reads]")
        print("rna salmon <sample-name> <input-files> ")
        print("rna featureCounts <annotation-file (gtf/gff)> <output-file> <input-files> ")
        sys.exit(1)
    sys.exit()

def variants_subcmd(args:list) -> None:

    commands = {'s':'single', 'j':'joint', 'h': 'help'}
    args_utils.min_count(1, len(args),
                         msg="nsm-analysis variants takes one of the following commands: {}".format(args_utils.pretty_commands(commands)))

    command = args.pop(0)
    command = args_utils.valid_command(command, commands)
    if command == 'single':
        analysis.haplotypecaller(args=args, reference=reference, wdl_wf=wf_files['haplotype'], wdl_zip=nsm_zip, outdir=outdir, env=env, )
    elif command == 'joint':
        analysis.joint_vcf_calling(args=args, reference=reference, wdl_wf=wf_files['exome'], wdl_zip=nsm_zip, outdir=outdir, env=env, )
    else:
        print("Help:")
        print("variant calling bam files")
        print("==========================")
        print("variants single <sample-name> <input-file> ")
        print("variants joint <output-name> <input-files>")
        sys.exit(1)
    sys.exit()


def qc_subcmd(args:list) -> None:

    commands = {'f':'fastqc', 'e':'exome', 'g':'genome', 'r': 'rnaseq','h': 'help'}
    args_utils.min_count(1, len(args),
                         msg="nsm-analysis qc takes one of the following commands: {}".format(args_utils.pretty_commands(commands)))

    command = args.pop(0)
    command = args_utils.valid_command(command, commands)

    sys.exit()

def utils_subcmd(args:list) -> None:

    commands = {'f':'fqs-to-ubam', 'b':'bams-to-ubams','h': 'help'} # 'bs':'bams-to-ubam',
    args_utils.min_count(1, len(args),
                         msg="nsm-analysis utils takes one of the following commands: {}".format(args_utils.pretty_commands(commands)))

    command = args.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'fqs-to-ubam':
        analysis.fq_to_ubam(args=args, wdl_wf=wf_files['fqs-to-ubam'], wdl_zip=nsm_zip, outdir=outdir, env=env, )
#    elif command == 'bams-to-ubam':
#        analysis.bams_to_ubam(args=args, wdl_wf=wf_files['to-ubam'], wdl_zip=nsm_zip, outdir=outdir, env=env, )
    elif command == 'bams-to-ubams':
        analysis.bams_to_ubam(args=args, wdl_wf=wf_files['bams-to-ubams'], wdl_zip=nsm_zip, outdir=outdir, env=env, )
    else:
        print("Help:")
        print("Upstream analysis utils")
        print("==========================")
        print("fqs-to-ubam <sample-name> <input-files> ")
        print("bams-to-ubam <sample-name> <input-files> (merge all bam files to one file)")
        print("bams-to-ubams <input-files>  ")
        sys.exit(1)

    sys.exit()

def main():

    commands = {'d':'dna', 'r':'rna','v':'variants', 'q':'qc', 'u':'utils', 'h': 'help'}


    parser = argparse.ArgumentParser(description=f'nsm-analysis: command line tool for nsm-pipelines ({version})')

    parser.add_argument('-r', '--reference', help="reference to use: hg38(default), hg19", default="hg38")
    parser.add_argument('-o', '--outdir', help="where to export results to, default working directory")

    parser.add_argument('-R', '--reference-dir', help="reference dir", default="/usr/local/refs")
    parser.add_argument('-n', '--nsm-analysis-root', help="location of nsm-analysis", default="/usr/local/lib/nsm-analysis")
    parser.add_argument('--no-export', help="Dont export results", action="store_true", default=False)
    parser.add_argument('-z', '--zipfile', help="wdl zipfile with tasks")
    parser.add_argument('-v', '--verbose', default=0, action="count", help="Increase the verbosity of logging output")
    parser.add_argument('-D','--development', help="running environment", action="store_true", default=False)
    parser.add_argument('command', nargs='*', help="{}".format(",".join(commands)))

    args = parser.parse_args()

    init(args)

    args_utils.min_count(1, len(args.command),
                         msg="nsm-analysis takes one of the following commands: {}".format(args_utils.pretty_commands(commands)))

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'dna':
        dna_subcmd(args.command)
    if command == 'rna':
        rna_subcmd(args.command)
    elif command == 'variants':
        variants_subcmd(args.command)
    elif command == 'qc':
        qc_subcmd(args.command)
    elif command == 'utils':
        utils_subcmd(args.command)
    else:
        print("The tool support the following commands: {}\n".format(args_utils.pretty_commands(commands)))
        parser.print_usage()
        parser.add_argument('command', nargs='+', help="{}".format(",".join(commands)))
        sys.exit(1)

if __name__ == "__main__":
    main()
