#!/usr/bin/env python3

import os
import re
import sys
import argparse
from datetime import datetime, timedelta
import time
import json

import pytz
import tabulate 

import kbr.args_utils as args_utils
import kbr.version_utils as version_utils
import kbr.string_utils as string_utils
import kbr.datetime_utils as datetime_utils
import kbr.file_utils as file_utils



sys.path.append('.')

import cromwell.api as cromwell_api
import cromwell.facade as cromwell_facade
import cromwell.utils as cromwell_utils


version = version_utils.as_string('cromwell')
as_json = False

def group_args(args) -> {}:

    res = {'':[]}
    for arg in args:
        m = re.match(r'(\w):(.+)', arg)
        if m is not None:
            k, v = m.group(1), m.group(2)
            if k not in res:
                res[ k ] = []
            res[ k ].append(v)
        else:
            res[ 'rest' ].append(v)
            
    return res

def cromwell_info() -> None:
    c_version = cromwell_api.get_version()
    c_status = cromwell_api.get_status()
    print(f'Cromwell server (v:{c_version}), status: {c_status}')


def workflow_subcmd(commands) -> None:
    sub_commands = ['submit', 'batch', 'status', 'abort', 'logs', 'outputs', 'timing', 'meta', 'labels', 'help']

    if len(commands) == 0:
        commands.append('help')

    sub_command = commands.pop(0)
    commands_map = {'s': 'submit', 'b': 'batch', 'st': 'status', 'a':'abort', 'l': 'logs',
                    'o':'outputs', 't': 'timing', 'm':'meta', 'la': 'labels', 'h':'help'}
    if sub_command in commands_map:
        sub_command = commands_map[ sub_command ]

    if sub_command == 'submit':
        cromwell_facade.submit_workflow(commands, as_json=as_json)
    elif sub_command == 'batch':
        cromwell_facade.batch_submit_workflow(commands, as_json=as_json)
    elif sub_command == 'status':
        cromwell_facade.workflow_status(commands, as_json=as_json)
    elif sub_command == 'abort':
        cromwell_facade.workflow_abort(commands, as_json=as_json)
    elif sub_command == 'logs':
        cromwell_facade.workflow_logs(commands, as_json=as_json)
    elif sub_command == 'outputs':
        cromwell_facade.workflow_outputs(commands, as_json=as_json)
    elif sub_command == 'timing':
        sys.exit(10)
        print('not done yet, do we need this? outputs a html page')
        cromwell_facade.workflow_timing(commands, as_json=as_json)
    elif sub_command == 'meta':
        cromwell_facade.workflow_meta(commands, as_json=as_json)
    elif sub_command == 'labels':
        sub_cmd = args_utils.get_or_fail(commands, "Need either get or set")
        if sub_cmd == 'get':
            cromwell_facade.workflow_labels_get(commands, as_json=as_json)
        elif sub_cmd == 'set':
            wf_id = args_utils.get_or_fail(commands, "workflow id is required")
            cromwell_facade.workflow_labels_set(wf_id, commands)
        else:
            print("provide either get or set for workflow labels")

    else:
        if sub_command != 'help':
            print(f"Error: Unknown command '{sub_command}'\n")

        print("Help:")
        print("Submit and interact with workflow(s)")
        print("==========================")
        print("workflow submit [wdl-file] i:[input-jsonfile(s)] o:[options-jsonfile] d:[dependency-zipfile] l:[label-jsonfile] ")
        print("workflow batch  [wdl-file] i:[input-jsonfile] o:[options-jsonfile] d:[dependency-zipfile] l:[label-jsonfile]")
        print("workflow status [job-ids]")
        print("workflow abort [job-ids]")
        print("workflow logs [job-ids]")
        print("workflow labels get [job-ids]")
        print("workflow labels set [job-ids] [labels]")
        print("workflow outputs [job-ids]")
        print("workflow meta [job-ids]")
        sys.exit(1)


def print_workflows(data:[], as_json:bool=False, brief:bool=False) -> None:
    counts = {}
    for r in data:
        name = r.get('name', 'NA')
        status = r['status']
        if name not in counts:
            counts[name] = {}
        if status not in counts[name]:
            counts[name][status] = 0
        counts[name][status] += 1

    res = [['name', 'status', 'count']]
    for name in counts:
        for status in counts[name]:
            res.append([name, status, counts[name][status]])

    print( tabulate.tabulate(res, headers="firstrow", tablefmt='psql'))



def workflows_subcmd(commands) -> None:
    sub_commands = ['days', 'status', 'name', 'id', 'label', 'help']

    brief = False
    if 'brief' in commands:
        brief = True
        del commands[ commands.index( 'brief')]

    if 'b' in commands:
        brief = True
        del commands[ commands.index( 'b')]

    if len(commands) == 0:
        commands.append('all')

    sub_command = commands.pop(0)
    commands_map = {'d': 'days', 's': 'status', 'n': 'name', 'i':'id', 'l': 'label', 'h':'help'}
    if sub_command in commands_map:
        sub_command = commands_map[ sub_command ]


    if sub_command == 'all':
        data = cromwell_facade.workflows(as_json=as_json)
    elif sub_command == 'date':
        from_date = args_utils.get_or_fail(commands, "from date is required")
        to_date   = args_utils.get_or_default(commands, None)

        data = cromwell_facade.workflows(from_date=from_date, to_date=to_date, as_json=as_json)
    elif sub_command == 'days':
        days   = args_utils.get_or_default(commands, 7)
        from_date = datetime_utils.to_string( datetime.now(pytz.utc) - timedelta(days=int(days)) )
        data = cromwell_facade.workflows(from_date=from_date, as_json=as_json, query=True)
    elif sub_command == 'hours':
        hours   = args_utils.get_or_default(commands, 1)
        from_date = datetime_utils.to_string( datetime.now(pytz.utc) - timedelta(hours=int(hours)) )
        data = cromwell_facade.workflows(from_date=from_date, as_json=as_json, query=True)
    elif sub_command == 'status':
        data = cromwell_facade.workflows(status=commands, as_json=as_json)
    elif sub_command == 'name':
        data = cromwell_facade.workflows(names=commands, as_json=as_json)
    elif sub_command == 'id':
        data = cromwell_facade.workflows(ids=commands, as_json=as_json)
    elif sub_command == 'label':
        data = cromwell_facade.workflows(labels=commands, as_json=as_json)

    elif sub_command == 'query' or sub_command == 'q':
        args = group_args(commands)

        data = cromwell_facade.workflows( from_date=args.get("f", None),
                            to_date=args.get("t", None),
                            status=args.get("s", None), 
                            names=args.get("n", None), 
                            ids=args.get("i", None), 
                            labels=args.get("l", None), query=True, as_json=as_json)
    else:
        
        if sub_command != 'help':
            print(f"Error: Unknown command '{sub_command}'\n")

        print("Help:")
        print("Fetches information/status for workflow(s), can be filtered in various ways")
        print("==========================")
        print("workflows (all, default)")

        print("workflows days [nr of days, default=7]")
        print("workflows hours [hours from now]")
        print("workflows status [status1, status2, ...]  ")
        print("workflows name [name1, name2, ...]")
        print("workflows id [id1, id2, ...]")
        print("workflows date [from-date] <end-date>  ")
        print("workflows query f:[from-date] t:[to-date] s:[status] n:[name] i:[ids] l:[labels]")

        sys.exit(1)

    if as_json:
        print(json.dumps(data))
    elif brief:
        print_workflows(data, as_json, brief)

    else:
        res = [["id", "name", "status", "submitted", "started", "ended"]]
        for r in data:
            if 'parentWorkflowId' in r:
                continue

            res.append([ r['id'], r.get('name','NA'), r['status'], r['submission'], r.get('start', 'NA'), r.get('end', 'NA')])
        print( tabulate.tabulate(res, headers="firstrow", tablefmt='psql'))



def cleanup_subcmd(commands) -> None:
    sub_commands = ['tmpfile', 'cleanup', 'nuke', 'help']

    if len(commands) == 0 :
        commands.append('help')
    sub_command = commands.pop(0)

    commands_map = {'t': 'tmpfiles', 'c': 'cleanup', 'h':'help'}
    if sub_command in commands_map:
        sub_command = commands_map[ sub_command ]

    if sub_command == 'cleanup' or sub_command == 'purge' or sub_command == 'nuke':
        value = args_utils.get_or_fail(commands, "cleanup/purge requires either days or hours followed by a number, or an id")
        if cromwell_utils.is_id(value):
            cromwell_facade.cleanup(action=sub_command, ids=[value] + commands)
        else:
            time_span = int(args_utils.get_or_default(commands, 2))
            cromwell_facade.cleanup(action=sub_command, time_type=value, time_span=time_span)

    else:
        
        if sub_command != 'help':
            print(f"Error: Unknown command '{sub_command}'\n")

        print("Help:")
        print("Delete files created during workflow analysis")
        print("==========================")
        print("cleanup tmpfiles [id(s)] (various tmp files)")
        print("cleanup tmpfiles hours [hours from now, default=2]")
        print("cleanup tmpfiles days [days from now, default=2]")
        print("cleanup results [id(s)] (tmp and results files)")
        print("cleanup results hours [hours from now, default=2]")
        print("cleanup results days [days from now, default=2]")
        print("cleanup nuke [id(s)] (! everything from the analysis)")
        print("cleanup nuke hours [hours from now, default=2]")
        print("cleanup nuke days [days from now, default=2]")
        sys.exit(1)



def utils_subcmd(commands) -> None:
    sub_commands = ['set-paths', 'ping', '', 'help']

    if len(commands) == 0 :
        commands.append('help')
    sub_command = commands.pop(0)

    commands_map = {'s':'set-paths', 'p': 'ping', 'h':'help'}
    if sub_command in commands_map:
        sub_command = commands_map[ sub_command ]

    if sub_command == 'set-paths':
        path = args_utils.get_or_fail(commands, "path to wdl-dir missing")

        for filename in files:
            cromwell_utils.patch_imports(filename, files)

        cromwell_utils.patch_version_location(path)

    elif sub_command == 'ping':
        cromwell_info()

    else:
        
        if sub_command != 'help':
            print(f"Error: Unknown command '{sub_command}'\n")

        print("Help:")
        print("small utils that don't belong elsewhere")
        print("==========================")

        print("utils set-paths [path to wdl dir]")
        print("utils ping (check server is a alive and what version is running) ")
        sys.exit(1)


def monitor_subcmd(commands, interval:int=60) -> None:
    sub_commands = ['all', 'days', 'hours','status', 'name', 'id', 'label', 'brief', 'help']

    if len(commands) == 0 :
        commands.append('all')

    if commands[0] not in sub_commands or 'help' in commands:
        if 'help' not in commands:
            print(f"Error: Unknown command '{commands[0]}'\n")

        print("Help:")
        print("Like workflows, but continually updates the information")
        print("==========================")
        print("monitor (all, default)")
        print("monitor days [days from now]")
        print("monitor hours [hours from now]")
        print("monitor status [status1, status2, ...]  ")
        print("monitor name [name1, name2, ...]")
        print("monitor id [id1, id2, ...]")
        print("monitor label [label1, label2, ...]")
        print("monitor query s:[status] n:[name] i:[ids] l:[labels]")
        sys.exit(1)

    global as_json
    as_json = False

    tmp_commands = commands.copy()

    while True:
        os.system('clear')
        print(datetime.now())
        commands = tmp_commands.copy()
        workflows_subcmd( commands )
        time.sleep(int(interval))
        continue

def main():

    commands = [ 'workflow', 'workflows', 'monitor', 'cleanup', 'utils', 'help']

    parser = argparse.ArgumentParser(description=f'nga_cli: command line tool for the NGA ({version})')

    parser.add_argument('-c', '--config', help="NGA config file, or set env CROMWELL",
                        default=args_utils.get_env_var('CROMWELL'))
    parser.add_argument('-j', '--json-output', help="print the outputs in json format",
                        action="store_true", default=False)
    parser.add_argument('-i', '--interval', help="update interval when monitoring", default=60)
    parser.add_argument('-v', '--verbose', default=0, action="count", help="Increase the verbosity of logging output")
    parser.add_argument('command', nargs='*', help="{}".format(",".join(commands)))

    args = parser.parse_args()

    if args.json_output:
        global as_json
        as_json = True

    args_utils.min_count(1, len(args.command),
                         msg="nga-cli takes one of the following commands: {}".format(string_utils.comma_sep(commands)))

    command = args.command.pop(0)

    commands_map = {'wf': 'workflow', 'wfs': 'workflows', 'm': 'monitor', 'c': 'cleanup', 'u':'utils', 'h':'help'}
    if command in commands_map:
        command = commands_map[ command ]

    if command == 'workflow':
        workflow_subcmd(args.command)
    elif command == 'workflows':
        workflows_subcmd(args.command)
    elif command == 'monitor':
        monitor_subcmd(args.command, args.interval)
    elif command == 'cleanup':
        cleanup_subcmd(args.command)
    elif command == 'utils':
        utils_subcmd(args.command)
    else:
        print("The tool support the following commands: {}\n".format(string_utils.comma_sep(commands)))
        parser.print_usage()
        parser.add_argument('command', nargs='+', help="{}".format(",".join(commands)))
        sys.exit(1)

if __name__ == "__main__":
    main()
